import { Component, NgModule, OnInit } from '@angular/core';
import { RoundanalisticsService } from '../../services/RoundAnalytics/roundanalistics.service';
import { CardsComponent } from '../../components/cards/cards.component';
import { ShowJobsComponent } from '../../components/show-jobs/show-jobs.component';
import { CommonModule } from '@angular/common';
import { JobsService } from '../../services/Jobs/jobs.service';
import { ShowCertificatesComponent } from '../../components/show-certificates/show-certificates.component';
import { CertificatesService } from '../../services/Certificates/certificates.service';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css'],
  standalone: true,
  imports: [
    CardsComponent,
    ShowJobsComponent,
    ShowCertificatesComponent,
    CommonModule,
  ],
})
export class HomeComponent implements OnInit {
  cards = [
    {
      title: 'Total Users',
      description:
        'Including Overall number of registered students on the platform',
      iconPath: 'userAn.svg',
      value: 0,
    },
    {
      title: 'Total Tracks',
      description:
        'Including the total number of Current tracks available in the branch',
      iconPath: 'tracks.svg',
      value: 0,
    },
    {
      title: 'Total Jobs',
      description:
        'Including number of projects submitted by students across all current tracks',
      iconPath: 'jobs.svg',
      value: 0,
    },
    {
      title: 'Target Achievers',
      description: 'Students who successfully completed their project goals.',
      iconPath: 'target.svg',
      value: 0,
    },
    {
      title: 'Approved Jobs',
      description:
        'Including projects that have successfully received official approval from admin',
      iconPath: 'approvied-job.svg',
      value: 0,
    },
    {
      title: 'Total Earnings',
      description:
        'Cumulative income generated by students through completed projects',
      iconPath: 'Total Earnings.svg',
      value: 0,
    },
    {
      title: 'Total Earnings',
      description:
        'Cumulative income generated by students through completed projects',
      iconPath: 'Total Earningseg.svg',
      value: 0,
    },
  ];
  jobs: any[] = [];
  certificates: any[] = [];

  isLoadingAnalytics = true;
  isLoadingJobs = true;

  constructor(
    private analyticsService: RoundanalisticsService,
    private jobsService: JobsService,
    private certificatesService: CertificatesService
  ) {}

  ngOnInit(): void {
    this.loadAnalyticsData();
    this.getJobs();
    this.getCrtificates();
  }

  loadAnalyticsData(): void {
    this.analyticsService.getData('roundAnalytics').subscribe({
      next: (data: any) => {
        const total = [
          data.numberOfStudents,
          data.numberOfTracks,
          data.numberOfJobs,
          data.numberOfTargetAchievers,
          data.numberOfApprovedJobs,
          data.totalProfit,
          data.totalProfit,
        ];
        this.cards = this.cards.map((card, index) => ({
          ...card,
          value: total[index],
        }));
        this.isLoadingAnalytics = false;
      },
      error: (err) => {
        console.error(err);
        this.isLoadingAnalytics = false;
      },
    });
  }

  getCrtificates(): void {
    this.certificatesService.getAllCertificates().subscribe({
      next: (data) => {
        this.certificates = data;
        const count = this.certificates.filter(
          (req: any) => !req.verified
        ).length;

        this.certificatesService.setUnseenCertificates(count);
        this.isLoadingJobs = false;
      },
      error: (error) => {
        console.error('Error loading jobs:', error);
        this.isLoadingJobs = false;
      },
    });
  }

  getJobs(): void {
    this.jobsService.getAllJobs().subscribe({
      next: (data) => {
        this.jobs = data;

        const count = this.jobs.filter((req: any) => !req.verified).length;
        this.jobsService.setUnseenRequests(count);

        this.isLoadingJobs = false;
      },
      error: (error) => {
        console.error('Error loading jobs:', error);
        this.isLoadingJobs = false;
      },
    });
  }

  getFirstTwoNames(studentName: string): string {
    const names = studentName.split(' ');
    return names.length > 2 ? `${names[0]} ${names[1]}` : studentName;
  }
}
